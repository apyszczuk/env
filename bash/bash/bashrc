# ALIASES --------------------------------------------------------------------------------

# ls
alias ls='ls --color=auto --group-directories-first'
alias ll='ls -lh'
alias l='ls -lah'

# cp
alias cp='cp -i'

# rm
alias rm='rm -i'

# cd
alias ..='cd ../'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias ......='cd ../../../../../'

# git
alias gst='git status'
alias glgg='git log --decorate --graph'
alias glgga='git log --decorate --graph --all'
alias gd='git diff'
alias gds='git diff --staged'


# DIR COLORS -----------------------------------------------------------------------------

if [[ $PS1 && -f ~/.dircolors ]]; then
    source ~/.dircolors
fi


# AUTO COMPLETION ------------------------------------------------------------------------

if [[ $PS1 && -f /usr/share/bash-completion/bash_completion ]]; then
    . /usr/share/bash-completion/bash_completion
fi


# HISTORY --------------------------------------------------------------------------------

# do not save line if it starts with a space
# do not save duplicate lines (session history has one copy of it)
export HISTCONTROL=ignorespace:erasedups
export HISTSIZE=1000

# clear history duplicates leaving only the latests
function _clear_history_duplicates()
{
    # if session is about not to save history
    # or the history file have not yet been created
    if [ -z "$HISTFILE" ] || [ ! -e "$HISTFILE" ]; then
        return
    fi

    tac "$HISTFILE" |
    awk '{$1=$1};1' |
    cat -n |
    sort -uk2 |
    sort -nk1 |
    tac |
    cut -f2- > "$HISTFILE.$" && mv "$HISTFILE.$" "$HISTFILE"
}

_clear_history_duplicates


# PROMPT ---------------------------------------------------------------------------------

_color_white="01;37"
_color_yellow="01;33"
_color_blue="38;5;33"
_color_red="01;31"
_color_green="01;32"

function _print_in_color()
{
    color="$1"
    str="$2"

    # "\[" and "\]" are special characters to begin and end sequence of
    # non-printing characters. Without them, prompt gets messy.
    #
    # https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#index-prompting
    printf "\[\033[%sm\]%s\[\033[0m\]" "$color" "$str"
}

function _prompt_git_status_parse()
{
    status="$1"
    greptext="$2"
    ret="$3"

    value=$(printf "$status" | grep "$greptext")
    
    if [ "$value" == "" ]; then
        printf ""
    else
        printf "$ret"
    fi
}

function _prompt_git_untracked()
{
    _prompt_git_status_parse "$1" "^Untracked files:" "%%"
}

function _prompt_git_modified()
{
    _prompt_git_status_parse "$1" "^Changes not staged for commit:" "*"
}

function _prompt_git_staged()
{
    _prompt_git_status_parse "$1" "^Changes to be committed:" "+"
}

function _prompt_git_branch_up_to_date()
{
    _prompt_git_status_parse "$1" "^Your branch is up to date with" "="
}

function _prompt_git_branch_ahead()
{
    _prompt_git_status_parse "$1" "^Your branch is ahead of" ">"
}

function _prompt_git_branch_behind()
{
    _prompt_git_status_parse "$1" "^Your branch is behind" "<"
}

function _prompt_git_branch_diverged()
{
    _prompt_git_status_parse "$1" "^Your branch and '.*' have diverged" "<>"
}

function _prompt_git_branch_name()
{
    stat="$1"
    branch_name=$(printf "$stat" | grep "^On branch" | awk '{ print $3}')
    if [ "$branch_name" == "" ]; then
        branch_name=$(printf "$stat" | grep "^HEAD detached at" | awk '{ print $4}')
    fi
    printf "$branch_name"
}

function _prompt_git()
{
    is_repo=$(git rev-parse --is-inside-work-tree 2> /dev/null)
    if [ "$is_repo" == "true" ]; then
        git_flags=""
        if [ "$ENV_BASH_PROMPT_GIT_STATUS_IGNORE_SUBMODULES" == "1" ]; then
            git_flags+=" --ignore-submodules"
        fi
        if [ "$ENV_BASH_PROMPT_GIT_STATUS_IGNORE_UNTRACKED_FILES" == "1" ]; then
            git_flags+=" --untracked-files=no"
        fi
        stat=$(git status $git_flags)

        printf " "
        printf "("
        _print_in_color "$_color_green" "$(_prompt_git_branch_name "$stat")"
        _print_in_color "$_color_red" "$(_prompt_git_modified "$stat")"
        _print_in_color "$_color_green" "$(_prompt_git_staged "$stat")"
        _print_in_color "$_color_blue" "$(_prompt_git_untracked "$stat")"
        _print_in_color "$_color_green" "$(_prompt_git_branch_up_to_date "$stat")"
        _print_in_color "$_color_green" "$(_prompt_git_branch_ahead "$stat")"
        _print_in_color "$_color_green" "$(_prompt_git_branch_behind "$stat")"
        _print_in_color "$_color_red" "$(_prompt_git_branch_diverged "$stat")"
        printf ")"
    else
        printf ""
    fi
}

function _prompt()
{
    last_command_status="$?"
    prompt_sign_color="$_color_white"
    if [ "$ENV_BASH_PROMPT_LAST_COMMAND_STATUS" == "1" ]; then
        prompt_sign_color="$_color_yellow"
        if [ "$last_command_status" == "0" ]; then
            prompt_sign_color="$_color_green"
        fi
    fi

    _print_in_color "$_color_white" "\u"
    printf "@"
    _print_in_color "$_color_yellow" "\h"
    printf ":"
    _print_in_color "$_color_blue" "\w"
    if [ "$ENV_BASH_PROMPT_GIT_STATUS" == "1" ]; then
        _prompt_git
    fi
    _print_in_color "$prompt_sign_color" " $ "
}

function _prompt_save_cwd()
{
    if [ "$ENV_BASH_PROMPT_SAVE_CURRENT_WORKING_DIRECTORY" == "1" ]; then
        pwd > "$HOME/.terminal-cwd"
    fi
}

function _prompt_main()
{
    local tmp=""
    tmp+="export PS1=\$(_prompt);"
    tmp+="\$(_prompt_save_cwd);"

    export PROMPT_COMMAND="$tmp"
}

_prompt_main


# TERMINAL SETTINGS ----------------------------------------------------------------------

# disable XON/XOFF flow control (CTRL-S/CTRL-Q)
stty -ixon


# DEFAULT CONFIGURATION ------------------------------------------------------------------

export ENV_BASH_PROMPT_GIT_STATUS=1
export ENV_BASH_PROMPT_GIT_STATUS_IGNORE_SUBMODULES=1
export ENV_BASH_PROMPT_GIT_STATUS_IGNORE_UNTRACKED_FILES=0
export ENV_BASH_PROMPT_LAST_COMMAND_STATUS=1
export ENV_BASH_PROMPT_SAVE_CURRENT_WORKING_DIRECTORY=1


# vim:cc=90
